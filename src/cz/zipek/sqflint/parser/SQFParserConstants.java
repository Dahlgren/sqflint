/* Generated By:JavaCC: Do not edit this line. SQFParserConstants.java */
package cz.zipek.sqflint.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SQFParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 14;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 15;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 16;
  /** RegularExpression Id. */
  int ASSIGN = 18;
  /** RegularExpression Id. */
  int GT = 19;
  /** RegularExpression Id. */
  int LT = 20;
  /** RegularExpression Id. */
  int GTEQ = 21;
  /** RegularExpression Id. */
  int LTEQ = 22;
  /** RegularExpression Id. */
  int BANG = 23;
  /** RegularExpression Id. */
  int BANG2 = 24;
  /** RegularExpression Id. */
  int EQ = 25;
  /** RegularExpression Id. */
  int SC_OR = 26;
  /** RegularExpression Id. */
  int SC_AND = 27;
  /** RegularExpression Id. */
  int PLUS = 28;
  /** RegularExpression Id. */
  int MINUS = 29;
  /** RegularExpression Id. */
  int STAR = 30;
  /** RegularExpression Id. */
  int SLASH = 31;
  /** RegularExpression Id. */
  int POWER = 32;
  /** RegularExpression Id. */
  int REM = 33;
  /** RegularExpression Id. */
  int REM2 = 34;
  /** RegularExpression Id. */
  int CSEL = 35;
  /** RegularExpression Id. */
  int CASE = 36;
  /** RegularExpression Id. */
  int CATCH = 37;
  /** RegularExpression Id. */
  int _DEFAULT = 38;
  /** RegularExpression Id. */
  int DO = 39;
  /** RegularExpression Id. */
  int ELSE = 40;
  /** RegularExpression Id. */
  int FOR = 41;
  /** RegularExpression Id. */
  int FROM = 42;
  /** RegularExpression Id. */
  int TO = 43;
  /** RegularExpression Id. */
  int STEP = 44;
  /** RegularExpression Id. */
  int GOTO = 45;
  /** RegularExpression Id. */
  int IF = 46;
  /** RegularExpression Id. */
  int THEN = 47;
  /** RegularExpression Id. */
  int EXIT_WITH = 48;
  /** RegularExpression Id. */
  int NULL = 49;
  /** RegularExpression Id. */
  int SWITCH = 50;
  /** RegularExpression Id. */
  int WHILE = 51;
  /** RegularExpression Id. */
  int TRUE = 52;
  /** RegularExpression Id. */
  int FALSE = 53;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 54;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 55;
  /** RegularExpression Id. */
  int HEX_LITERAL = 56;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 57;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 58;
  /** RegularExpression Id. */
  int EXPONENT = 59;
  /** RegularExpression Id. */
  int STRING_LITERAL = 60;
  /** RegularExpression Id. */
  int STRING_LITERAL_OTHER = 61;
  /** RegularExpression Id. */
  int IDENTIFIER = 62;
  /** RegularExpression Id. */
  int LETTER = 63;
  /** RegularExpression Id. */
  int DIGIT = 64;
  /** RegularExpression Id. */
  int LPAREN = 65;
  /** RegularExpression Id. */
  int RPAREN = 66;
  /** RegularExpression Id. */
  int LBRACE = 67;
  /** RegularExpression Id. */
  int RBRACE = 68;
  /** RegularExpression Id. */
  int LBRACKET = 69;
  /** RegularExpression Id. */
  int RBRACKET = 70;
  /** RegularExpression Id. */
  int COMMA = 71;
  /** RegularExpression Id. */
  int DOT = 72;
  /** RegularExpression Id. */
  int SEMICOLON = 73;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int PREPROCESSOR_OUTPUT = 1;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 2;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 3;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 4;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"#\"",
    "\"\\n\"",
    "\"\\\\\\n\"",
    "\"\\\\\\r\\n\"",
    "<token of kind 10>",
    "\"//\"",
    "<token of kind 12>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 17>",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"!\"",
    "\"not \"",
    "\"==\"",
    "\"||\"",
    "\"&&\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"%\"",
    "\"mod\"",
    "\">>\"",
    "\"case\"",
    "\"catch\"",
    "\"default\"",
    "\"do\"",
    "\"else\"",
    "\"for\"",
    "\"from\"",
    "\"to\"",
    "\"step\"",
    "\"goto\"",
    "\"if\"",
    "\"then\"",
    "\"exitWith\"",
    "\"objNull\"",
    "\"switch\"",
    "\"while\"",
    "\"true\"",
    "\"false\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<STRING_LITERAL_OTHER>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\".\"",
    "\";\"",
    "\"!=\"",
    "\":\"",
  };

}
